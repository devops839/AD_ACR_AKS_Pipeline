trigger:
  branches:
    include:
      - main
      - releases/*
    exclude:
      - releases/old*

pool:
  name: 'AgentReady'

steps:
# Checkout the repository with full history
- checkout: self
  fetchDepth: 0  # Fetch the full git history
  
# Prepare SonarQube analysis configuration
- task: SonarQubePrepare@7
  inputs:
    SonarQube: 'sonarqube_sc'
    scannerMode: 'cli'
    configMode: 'manual'
    cliProjectKey: 'voting-app'
    cliProjectName: 'voting-app'
    cliSources: '.'
    extraProperties: 'sonar.java.binaries=.'

# Compile the code (doesn't create jar)- task: Maven@4
- task: Maven@4
  inputs:
    mavenPomFile: 'pom.xml'
    goals: 'compile package sonar:sonar'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    javaHomeOption: 'JDKVersion'
    mavenVersionOption: 'Default'
    mavenAuthenticateFeed: false
    effectivePomSkip: false
    sonarQubeRunAnalysis: true
    sqMavenPluginVersionChoice: 'latest'

- task: SonarQubePublish@7
  inputs:
    pollingTimeoutSec: '300'

# Final SonarQube Analysis (This task must be done after Maven build, and analysis should be triggered before Docker build)
- task: SonarQubeAnalyze@7
  inputs:
    jdkversion: 'JAVA_HOME_17_X64'

# Build and Push Docker Image
- task: Docker@2
  inputs:
    containerRegistry: 'dockerhub_sc'
    repository: 'pavan539/voting-app-java'
    command: 'build'
    Dockerfile: '**/Dockerfile'
    tags: 'latest'

- script: |
    echo "Running Trivy scan on the Docker image"
    trivy image --format table -o trivy-image-report.html pavan539/voting-app-java:latest
  displayName: 'Trivy Image Scan'

- task: Docker@2
  inputs:
    containerRegistry: 'dockerhub_sc'
    repository: 'pavan539/voting-app-java'
    command: 'push'
    tags: 'latest'