trigger:
  - main

pool:
  vmImage: ubuntu-latest  # Set the image to be used for the build

variables:
  vmImage: ubuntu-latest  # Define the image variable if needed

stages:
  - stage: DockerBuild
    displayName: Build stage
    jobs:
      - job: DockerBuild
        displayName: Build Docker Image
        pool:
          vmImage: $(vmImage)  # Reference the vmImage variable here
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: 'demoacr839'
              repository: 'demoacr839/voting'
              command: 'build'
              Dockerfile: '**/Dockerfile'
              tags: $(Build.BuildId)

  - stage: TrivyScan
    displayName: Trivy Docker Image Scan
    jobs:
      - job: TrivyScan
        displayName: Trivy Docker Image Scan
        pool:
          vmImage: $(vmImage)
        steps:
          # Cache the Trivy vulnerability database manually
          - task: Cache@2
            inputs:
              key: 'trivy-db-cache-$(Agent.OS)-$(Build.SourceBranchName)'
              restoreKeys: |
                trivy-db-cache-
              path: $(Pipeline.Workspace)/.cache/trivy

          # Install Trivy
          - script: |
              echo "Installing Trivy..."
              curl -sfL https://github.com/aquasecurity/trivy/releases/download/v0.29.0/trivy_0.29.0_Linux-64bit.deb -o trivy.deb
              sudo dpkg -i trivy.deb
            displayName: 'Install Trivy'

          # Trivy scan with the custom cached vulnerability DB
          - script: |
              echo "Running Trivy scan on the Docker image"
              trivy --cache-dir $(Pipeline.Workspace)/.cache/trivy image --format table -o trivy-image-report.html demoacr839/voting:$(Build.BuildId)
            displayName: 'Trivy Image Scan'
